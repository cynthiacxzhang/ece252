## Curl Multi

Can process multiple transfers simultaneously
- similar to poll() in that it can block until an event happens (such as connect, transfer, complete, etc)

Functions: 

```c
CURLM *curl_multi_init(void); // returns a multi handle
curl_multi_add_handle(CURLM *multi_handle, CURL *easy_handle); // add an easy handle to the multi handle

curl_multi_perform(CURLM *multi_handle, int *running_handles); // perform all the transfers in the multi handle

curl_multi_wait(CURLM *multi_handle, int *maxfd, struct timeval *timeout); // wait for events on the multi handle

curl_multi_info_read(CURLM *multi_handle, CURLMsg **msg); // read messages from the multi handle

curl_multi_cleanup(CURLM *multi_handle); // clean up the multi handle

curl_multi_remove_handle(CURLM *multi_handle, CURL *easy_handle); // remove an easy handle from the multi handle
```

Steps:
1. global init
2. create a multi handle
3. create easy handles and add them to the multi handle
4. perform the transfers
5. loop until 0 running handles
    wait for event
    retrieve messages
        check status of transfers
        process easy handle
    
    See: [curl_multi.c]