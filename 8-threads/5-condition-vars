**Condition Variables**

A condition variable is a synchronization tool used to allow threads to wait for specific conditions or events to occur, typically involving shared resources.

Situation: combine a mutex unlock wiht a wait for events
- can be signalled (like post - wakes 1 blocked thread) or broadcasted (wakes all blocked threads)
- a signal or broadcase is lost if there are no threads blocked (waiting)

    Thread A:
        lock mutex
        while (!condition):
            wait on condition variable, mutex
        do something
        unlock mutex

    Thread B:
        lock mutex
        update state
        if(condition)   // needed by thread A
            signal/broadcast condition variable
        unlock mutex
    
    Note: waiting a condition variable implicitly unlocks the mutex before blocking, and relocks mutex after unblocking

- Thread A needs to recheck the condition after waiting because another thread, C, could have locked the mutex first and changed the condition.

**Functions and Initializers**

    ```c
    pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
    pthread_cond_init(&cond, &attr);            // NULL for attr = use defaults
                _destroy(&cond);
                _wait(&cond, &mutex);
                _signal(&cond);
                _broadcast(&cond);
    ```

We use a condition variable to implement a reusable barrier

Original: implemented using semaphores

    ```c
    const int n;
    int count = 0;
    sem_t mutex, turnstile1 = 0, turnstile2 = 1;

    sem_wait(&mutex);
    count++;
    if (count == n) {
        sem_wait(&turnstile2);
        sem_post(&turnstile1);
    }
    sem_post(&mutex);

    sem_wait(&turnstile1);
    sem_post(&turnstile1);

    sem_wait(&mutex);
    count--;
    if (count == 0) {
        sem_wait(&turnstile1);
        sem_post(&turnstile2);
    }
    sem_post(&mutex);

    sem_wait(&turnstile2);
    sem_post(&turnstile2);
    ```

Simplified Reusable Barrier: using condition variable
- check barrier.c

    ```c
    const int n;
    int count = 0;
    pthread_mutex_t mutex;
    pthread_cond_t condvar;

    pthread_mutex_lock(&mutex);
    count++;
    if (count < n) {
        pthread_cond_wait(&condvar, &mutex);
    } else {
        pthread_cond_broadcast(&condvar);
        count = 0;
    }
    pthread_mutex_unlock(&mutex);
```
 


