**Concurrent Programming Problems**

1. Starvations
- a thread is not guaranteed to make forward progress 
- see first readers-writers solution in part 6

2. Deadlocks
- two or more threads blocked permanently, waiting for each other to release shared resources

    e.g. 

    Thread A
        lock mutex A (succeed)
        lock mutex B (block)

    Thread B
        lock mutex B (succeed)
        lock mutex A (block)
    
    - blocking each other

3. Resource Allocation Graphs

    - thread A holds mutex 1
    - thread A waits for mutex 2

    Thread A             Thread B
        |                    |
        v                    v
    [muteX1]           [mutex2]
        ^                    ^
        |                    |
        +--------------------+
                A cycle!
    
    A cycle in a R.A.G. with mutexes indicates a deadlock!!

Another example: week 10 lecture 2

          semaphore1
        +-------------+
        |  ●       ●  | 
        +-------------+
         ↙           ↘
        A             B
         ↘           ↙
        +-------------+
        |  ●       ●  | 
        +-------------+
          semaphore2
           ↓        ↓
           C        D

- a cycle in a RAG with sempahores might not deadlock!

    Semaphore1 controls access to threads A and B.

    Semaphore2 controls access to threads C and D.

    The initial value of semaphore2 is 2 (not shown in the diagram but noted in the original image).

    When C or D posts (signals) the semaphore, A or B will unblock.

    A or B is not deadlocked because of this signaling.