**Threads**

Threads are a way to run multiple tasks at the same time.

Each process has one or more threads of execution 
- concurrent paths through the code

Per thread execution context:

- registers (PC, status, GP x0-x31)
- stack
- errno
- priority
- signal mask

Shared resources 

- memory (data section and heap)
- file descriptor table
- process id and group id
- cwd
- signal dispositions

Memory Map: 

    +--------------------+
    | Mainthread Stack   | <- grows downwards
    +--------------------+
    | Thread 3 Stack.    | 
    +--------------------+
    | Thread 2 Stack.    |
    +--------------------+
    | Thread 1 Stack.    |
    +--------------------+
    | Shared mem * libs  |
    +--------------------+
    | Heap               | <- grows upwards
    +--------------------+
    | Data               |
    +--------------------+
    | Text               |
    +--------------------+

 Thread creation is faster than forking a process
 - it doesn't duplicate the page table, file descriptor table, ...

 - threads have no hierarchy (any thread can join any other thread)
 - POSIX threads (pthread) functions return 0 on success, postive value on error
 - any return value needs to be dynamically allocated or a global variable (not local!!)


 **Creation and Termination**

    int pthread_create(pthrad_t *threadid, attr, void *(*s_t)(void *) void * start_routine, void *const pthread_attr_t *arg)

    attributes include: 
    - stack size and location
    - priority and scheduling policy
    - joinable state

Threads terminate when: 

    1. they return from start_routine()
    2. they call pthread_exit() (void *retval)
    3. they call pthread_cancel() (ptread_t tid)
    4. the process terminates by: 
        - calling exit() from any thread
        - the main thread returns from main()

A terminated thread should:
    
    1. be joined by pthread_join(pthread_t tid, void **retval)

    OR

    2. have been marked detached at thread creation or by calling pthread_detach(pthread_self())

**Thread Cancellation**



