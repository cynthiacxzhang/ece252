**C Programming Intro**

C is a subset of C++
- C++ is a superset of C, meaning all valid C code is also valid C++ code

C only has structs, no classes

    struct: A user-defined data type that allows grouping of variables of different types
    class: A user-defined data type that allows grouping of variables and functions (methods) of different types

Pass by value only, no pass by reference

    Pass by value: A copy of the variable is passed to the function
    Pass by reference: A reference to the variable is passed to the function, allowing the function to modify the original variable

No function overloading, no exception handling
- C relies on error codes and return values for error handling

-----------------------------------------------------------------------------

C Preprocessor Directives:
- `#include` for including header files
- `#define` for defining macros
- `#ifdef`, `#ifndef`, `#endif` for conditional compilation

C Standard Library:
- Provides a set of standard functions for input/output, string manipulation, memory management, etc.

C Standard Input/Output: <stdio.h>
- `printf()` for formatted output
- `scanf()` for formatted input
- `fopen()`, `fclose()`, `fread()`, `fwrite()` for file operations
- `stdlib.h` for general utilities (e.g., memory allocation, random numbers)
- `string.h` for string manipulation functions (e.g., `strlen()`, `str

C Constants: 
- `#define` for preprocessor constants
- `const` for constant variables

Arrays: 
- compiler-allocated contiguous memory blocks
- fixed size, cannot be resized at runtime
- can be multidimensional (e.g., `int arr[3][4]`)
- can be initialized with values (e.g., `int arr[3] = {1, 2, 3}`)
- can be passed to functions as pointers
